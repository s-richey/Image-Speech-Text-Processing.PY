#!/usr/bin/python

import pytesseract
from pdf2image import convert_from_path
from PIL import Image 
from gtts import gTTS
from playsound import playsound
import os, pathlib, glob
import cv2
import tempfile

def takeInput():
    pmode = 0

    print("Image files:", glob.glob("*.pdf") + glob.glob("*.jpg") + glob.glob("*.png"))
    IN = input("Enter a pdf or an image: ")
    if os.path.isfile(IN):
        path_stem = pathlib.Path(IN).stem
        path_ext  = pathlib.Path(IN).suffix
        if path_ext.lower() == '.pdf': pmode=1
    else:
        exit()
    return IN, path_stem, pmode


def pdf2txt(IN):
    pages = convert_from_path(IN)
    text = ''

    # This loop deserves its own program for reusability but is hardcoded for the assignment
    for i, page in enumerate(pages, start=1):
        if path_stem == 'Programming-Project-2' and i > 2:
            continue  # Skip OCR for pages beyond the second page
        text += pytesseract.image_to_string(page)
    return text
    # Returning text for testing processes
def im2txt(IN):
    text = pytesseract.image_to_string(Image.open(IN))  # Perform OCR on the image
    return text

def extract_text_from_specific_page(pdf_path, page_number=3):
    pages = convert_from_path(pdf_path)

    # Save the specific page as a temporary image file. cv2 requires this for some reason
    temp_image = tempfile.NamedTemporaryFile(suffix=".png", delete=False)
    pages[page_number - 1].save(temp_image.name, 'PNG')
    img = cv2.imread(temp_image.name)

    # Denoising/kernel thresholding for contours
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    ret, thresh1 = cv2.threshold(gray, 0, 255, cv2.THRESH_OTSU | cv2.THRESH_BINARY_INV)
    rect_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (30, 30))
    dilation = cv2.dilate(thresh1, rect_kernel, iterations=1)

    # Find and sort the contours based on the y value of the top left corner of each contour
    contours, _ = cv2.findContours(dilation, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
    contours = sorted(contours, key=lambda x: cv2.boundingRect(x)[1])
    im2 = img.copy()

    text = ''
    for cnt in contours:
        x, y, w, h = cv2.boundingRect(cnt)
        cropped = im2[y:y + h, x:x + w]
        text += pytesseract.image_to_string(cropped)
    temp_image.close()
    os.remove(temp_image.name)
    return text

if __name__ == '__main__':
    IN, path_stem, pmode = takeInput()   #pmode=0:image; pmode=1:pdf
    if path_stem == 'Programming-Project-2':  # Hard coded for assignment
        txt_first_two_pages = pdf2txt(IN)
        txt_third_page = extract_text_from_specific_page(IN)
        txt = txt_first_two_pages + txt_third_page
    elif pmode:
        txt = pdf2txt(IN)
    else:
        txt = im2txt(IN)

    print("Extracted Text:")  # Can be easily silenced if user doesn't want text printed
    print(txt)                # ^

    audio = gTTS(text=txt, lang="en", tld="co.in", slow=False)
    WAV = 'temp.wav' # Path stem naming can cause issues here for some reason
    audio.save(WAV);  playsound(WAV); os.remove(WAV)
    #pyttsx3.speak(txt) if playsound library does not work . Remember to import necessary packages
